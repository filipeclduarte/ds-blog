{
  
    
        "post0": {
            "title": "Title",
            "content": "!pip install -U ray . Collecting ray Downloading ray-1.8.0-cp37-cp37m-manylinux2014_x86_64.whl (54.7 MB) |████████████████████████████████| 54.7 MB 30 kB/s Requirement already satisfied: protobuf&gt;=3.15.3 in /usr/local/lib/python3.7/dist-packages (from ray) (3.17.3) Requirement already satisfied: attrs in /usr/local/lib/python3.7/dist-packages (from ray) (21.2.0) Requirement already satisfied: numpy&gt;=1.16 in /usr/local/lib/python3.7/dist-packages (from ray) (1.19.5) Requirement already satisfied: grpcio&gt;=1.28.1 in /usr/local/lib/python3.7/dist-packages (from ray) (1.42.0) Requirement already satisfied: jsonschema in /usr/local/lib/python3.7/dist-packages (from ray) (2.6.0) Collecting redis&gt;=3.5.0 Downloading redis-4.0.2-py3-none-any.whl (119 kB) |████████████████████████████████| 119 kB 54.1 MB/s Requirement already satisfied: msgpack&lt;2.0.0,&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from ray) (1.0.2) Requirement already satisfied: click&gt;=7.0 in /usr/local/lib/python3.7/dist-packages (from ray) (7.1.2) Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from ray) (3.13) Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from ray) (3.4.0) Requirement already satisfied: six&gt;=1.5.2 in /usr/local/lib/python3.7/dist-packages (from grpcio&gt;=1.28.1-&gt;ray) (1.15.0) Collecting deprecated Downloading Deprecated-1.2.13-py2.py3-none-any.whl (9.6 kB) Requirement already satisfied: wrapt&lt;2,&gt;=1.10 in /usr/local/lib/python3.7/dist-packages (from deprecated-&gt;redis&gt;=3.5.0-&gt;ray) (1.13.3) Installing collected packages: deprecated, redis, ray Successfully installed deprecated-1.2.13 ray-1.8.0 redis-4.0.2 . pip install pandas-datareader==0.10.0 . Collecting pandas-datareader==0.10.0 Downloading pandas_datareader-0.10.0-py3-none-any.whl (109 kB) |████████████████████████████████| 109 kB 37.8 MB/s Requirement already satisfied: lxml in /usr/local/lib/python3.7/dist-packages (from pandas-datareader==0.10.0) (4.2.6) Requirement already satisfied: pandas&gt;=0.23 in /usr/local/lib/python3.7/dist-packages (from pandas-datareader==0.10.0) (1.1.5) Requirement already satisfied: requests&gt;=2.19.0 in /usr/local/lib/python3.7/dist-packages (from pandas-datareader==0.10.0) (2.23.0) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.23-&gt;pandas-datareader==0.10.0) (2.8.2) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.23-&gt;pandas-datareader==0.10.0) (2018.9) Requirement already satisfied: numpy&gt;=1.15.4 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.23-&gt;pandas-datareader==0.10.0) (1.19.5) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.23-&gt;pandas-datareader==0.10.0) (1.15.0) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.19.0-&gt;pandas-datareader==0.10.0) (2.10) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.19.0-&gt;pandas-datareader==0.10.0) (3.0.4) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.19.0-&gt;pandas-datareader==0.10.0) (2021.10.8) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.19.0-&gt;pandas-datareader==0.10.0) (1.24.3) Installing collected packages: pandas-datareader Attempting uninstall: pandas-datareader Found existing installation: pandas-datareader 0.9.0 Uninstalling pandas-datareader-0.9.0: Successfully uninstalled pandas-datareader-0.9.0 Successfully installed pandas-datareader-0.10.0 . import pandas as pd import numpy as np import pandas_datareader as web import itertools . import ray # start ray ray.init(num_cpus=6) . {&#39;metrics_export_port&#39;: 62438, &#39;node_id&#39;: &#39;01d331c749e42aab051c37dc324fa73540f4da1c2c936884e451fc76&#39;, &#39;node_ip_address&#39;: &#39;172.28.0.2&#39;, &#39;object_store_address&#39;: &#39;/tmp/ray/session_2021-11-22_19-09-20_711468_62/sockets/plasma_store&#39;, &#39;raylet_ip_address&#39;: &#39;172.28.0.2&#39;, &#39;raylet_socket_name&#39;: &#39;/tmp/ray/session_2021-11-22_19-09-20_711468_62/sockets/raylet&#39;, &#39;redis_address&#39;: &#39;172.28.0.2:6379&#39;, &#39;session_dir&#39;: &#39;/tmp/ray/session_2021-11-22_19-09-20_711468_62&#39;, &#39;webui_url&#39;: None} . def get_data(ticker, dt_init, dt_end): return web.get_data_yahoo(ticker+&#39;.SA&#39;, start=dt_init, end=dt_end) @ray.remote def get_data_remote(ticker, dt_init, dt_end): return web.get_data_yahoo(ticker+&#39;.SA&#39;, start=dt_init, end=dt_end) def processa_data(x): return x[&#39;Adj Close&#39;].pct_change() @ray.remote def processa_data_remote(x): return x[&#39;Adj Close&#39;].pct_change() def ingest(ticker, dt_init, dt_end): df = get_data(ticker, dt_init, dt_end) df[&#39;retorno&#39;] = processa_data(df) return df.dropna() @ray.remote def ingest_remote(ticker, dt_init, dt_end): df = get_data(ticker, dt_init, dt_end) df[&#39;retorno&#39;] = processa_data(df) return df.dropna() . # benchmarking tickers = [&#39;ELET3&#39;, &#39;ELET6&#39;,&#39;PETR3&#39;, &#39;MGLU3&#39;, &#39;ABEV3&#39;, &#39;ALPA4&#39;, &#39;BRFS3&#39;, &#39;GOLL4&#39;, &#39;HYPE3&#39;, &#39;RENT3&#39;, &#39;MRFG3&#39;, &#39;RADL3&#39;, &#39;SUZB3&#39;, &#39;VALE3&#39;] data_init = &#39;2010-01-01&#39; data_end = &#39;2021-09-30&#39; . %%time resultado = [get_data(ticker, data_init, data_end) for ticker in tickers] . CPU times: user 1.51 s, sys: 147 ms, total: 1.65 s Wall time: 11.8 s . %%time resultado_ray = [get_data_remote.remote(ticker, data_init, data_end) for ticker in tickers] resultado_ray = ray.get(resultado_ray) . CPU times: user 191 ms, sys: 40.1 ms, total: 231 ms Wall time: 5.44 s . resultado_ray . %%time resultado_processamento = [processa_data(x) for x in resultado] . CPU times: user 16.8 ms, sys: 0 ns, total: 16.8 ms Wall time: 21.4 ms . resultado_processamento . %%time resultado_processamento_remote = [processa_data_remote.remote(x) for x in resultado_ray] resultado_processamento_remote = ray.get(resultado_processamento_remote) . CPU times: user 40.6 ms, sys: 18.4 ms, total: 58.9 ms Wall time: 102 ms . %%time dados = [ingest(ticker, data_init, data_end) for ticker in tickers] . CPU times: user 1.89 s, sys: 178 ms, total: 2.07 s Wall time: 32.2 s . dados . %%time dados_ray = [ingest_remote.remote(ticker, data_init, data_end) for ticker in tickers] dados_ray = ray.get(dados_ray) . CPU times: user 187 ms, sys: 40.9 ms, total: 228 ms Wall time: 7.35 s . dados_ray . combinacoes = list(itertools.combinations(dados[0].columns, 3)) . def statistics(df, combinacoes): return df[combinacoes].resample(&#39;Q&#39;).pad().describe() @ray.remote def statistics_remote(df, combinacoes): return df[combinacoes].resample(&#39;Q&#39;).pad().describe() . %%time stats = [statistics(df, list(combinacao)) for combinacao in combinacoes for df in dados] . CPU times: user 5.76 s, sys: 249 ms, total: 6.01 s Wall time: 6.06 s . %%time stats_ray = ray.get([statistics_remote.remote(df, list(combinacao)) for combinacao in combinacoes for df in dados]) . (statistics_remote pid=2113) CPU times: user 1.88 s, sys: 481 ms, total: 2.36 s Wall time: 8.36 s . combinacoes . [(&#39;High&#39;, &#39;Low&#39;, &#39;Open&#39;), (&#39;High&#39;, &#39;Low&#39;, &#39;Close&#39;), (&#39;High&#39;, &#39;Low&#39;, &#39;Volume&#39;), (&#39;High&#39;, &#39;Low&#39;, &#39;Adj Close&#39;), (&#39;High&#39;, &#39;Low&#39;, &#39;retorno&#39;), (&#39;High&#39;, &#39;Open&#39;, &#39;Close&#39;), (&#39;High&#39;, &#39;Open&#39;, &#39;Volume&#39;), (&#39;High&#39;, &#39;Open&#39;, &#39;Adj Close&#39;), (&#39;High&#39;, &#39;Open&#39;, &#39;retorno&#39;), (&#39;High&#39;, &#39;Close&#39;, &#39;Volume&#39;), (&#39;High&#39;, &#39;Close&#39;, &#39;Adj Close&#39;), (&#39;High&#39;, &#39;Close&#39;, &#39;retorno&#39;), (&#39;High&#39;, &#39;Volume&#39;, &#39;Adj Close&#39;), (&#39;High&#39;, &#39;Volume&#39;, &#39;retorno&#39;), (&#39;High&#39;, &#39;Adj Close&#39;, &#39;retorno&#39;), (&#39;Low&#39;, &#39;Open&#39;, &#39;Close&#39;), (&#39;Low&#39;, &#39;Open&#39;, &#39;Volume&#39;), (&#39;Low&#39;, &#39;Open&#39;, &#39;Adj Close&#39;), (&#39;Low&#39;, &#39;Open&#39;, &#39;retorno&#39;), (&#39;Low&#39;, &#39;Close&#39;, &#39;Volume&#39;), (&#39;Low&#39;, &#39;Close&#39;, &#39;Adj Close&#39;), (&#39;Low&#39;, &#39;Close&#39;, &#39;retorno&#39;), (&#39;Low&#39;, &#39;Volume&#39;, &#39;Adj Close&#39;), (&#39;Low&#39;, &#39;Volume&#39;, &#39;retorno&#39;), (&#39;Low&#39;, &#39;Adj Close&#39;, &#39;retorno&#39;), (&#39;Open&#39;, &#39;Close&#39;, &#39;Volume&#39;), (&#39;Open&#39;, &#39;Close&#39;, &#39;Adj Close&#39;), (&#39;Open&#39;, &#39;Close&#39;, &#39;retorno&#39;), (&#39;Open&#39;, &#39;Volume&#39;, &#39;Adj Close&#39;), (&#39;Open&#39;, &#39;Volume&#39;, &#39;retorno&#39;), (&#39;Open&#39;, &#39;Adj Close&#39;, &#39;retorno&#39;), (&#39;Close&#39;, &#39;Volume&#39;, &#39;Adj Close&#39;), (&#39;Close&#39;, &#39;Volume&#39;, &#39;retorno&#39;), (&#39;Close&#39;, &#39;Adj Close&#39;, &#39;retorno&#39;), (&#39;Volume&#39;, &#39;Adj Close&#39;, &#39;retorno&#39;)] .",
            "url": "https://filipeclduarte.github.io/ds-blog/2022/05/09/ray_process_data.html",
            "relUrl": "/2022/05/09/ray_process_data.html",
            "date": " • May 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://filipeclduarte.github.io/ds-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://filipeclduarte.github.io/ds-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://filipeclduarte.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://filipeclduarte.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}